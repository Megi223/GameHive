<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<link rel="stylesheet" href="/css/navbar-styles.css">
<nav class="navbar navbar-expand-lg navbar-custom">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">GameHive</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        
        <% if (isAuthenticated) { %>
            <ul class="navbar-nav navbar-center">
                <li class="nav-item">
                    <a class="nav-link" href="/friends/list">My Friends</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="/games/all">Games</a>
                  </li>
            </ul>
            <!-- Lives (center) -->
        <div class="mx-auto d-flex flex-column align-items-center lives-center">
          <!-- You can use <h1> if you prefer -->
    
          <div id="hearts-container" class="mb-1">
            <!-- Hearts will be rendered here dynamically -->
          </div>
          <div id="timer-container">
            <p id="timer-message" class="m-0">
              Next life in: <span id="timer">--:--</span>
            </p>
          </div>
        </div>
            <ul class="navbar-nav ms-auto align-items-center">
            <li class="nav-item">
                <a class="nav-link position-relative" href="/notifications/list">
                  <i class="bi bi-bell"></i>
                  <span id="notification-count" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    <%= notificationsCount || 0 %>
                  </span>
                </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/users/my-profile">My Profile</a>
            </li>
            <li class="nav-item">
              <form action="/auth/logout" method="POST" class="d-inline m-0">
                <button type="submit" class="btn btn-link nav-link p-0" style="text-decoration: none;">Logout</button>
              </form>
            </li>
        </ul>
          <% } else { %>
            <ul class="navbar-nav ms-auto align-items-center">
            <li class="nav-item">
              <a class="nav-link" href="/auth/login">Login</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/auth/register">Register</a>
            </li>
        </ul>
          <% } %>
      </div>
    </div>
  </nav>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    const isAuth = `<%= isAuthenticated %>`
    if(!window.socket && isAuth){
        const userID = `<%= userID %>`;
            console.log("User data:", userID);
        
  
    const socket = io('http://localhost:8080', {
        reconnection: true,
        auth: { userID: userID }, 
    });
    window.socket = socket
  
    socket.on("connect", () => {
      console.log("You connected with id " + `${socket.id}`);
    });
    
    }
    // on each page render- the socket id is changed
    
  
    socket.on("friend-request-sent", () => {
      let value = document.getElementById("notification-count").innerHTML
      document.getElementById("notification-count").innerHTML = parseInt(value) + 1

    });

    socket.on("friend-request-accepted", () => {
      let value = document.getElementById("notification-count").innerHTML
      document.getElementById("notification-count").innerHTML = parseInt(value) + 1

    });

    socket.on("notification-read", () => {
      let value = document.getElementById("notification-count").innerHTML
      document.getElementById("notification-count").innerHTML = parseInt(value) - 1

    });

    socket.on("invite-game-request", () => {
      let value = document.getElementById("notification-count").innerHTML
      document.getElementById("notification-count").innerHTML = parseInt(value) + 1

    });
    
  </script>

<script>
  // Initialize socket connection
  const socket = window.socket;
  const userID = `<%= userID %>`;
  // Lives and restore time passed from the server
  let initialLives = parseInt(`<%= lives %>`); // Number of current lives
  const maxLives = 5; // Total possible lives
  const restoreTime = new Date('<%= nextLifeRestore %>'); // Next restore time

  const heartsContainer = document.getElementById('hearts-container');
  const timerContainer = document.getElementById('timer-container');
  const timerElement = document.getElementById('timer');
  
  // Function to render hearts based on lives
  function renderHearts(lives) {
    heartsContainer.innerHTML = ''; // Clear current hearts

    for (let i = 0; i < maxLives; i++) {
      const heart = document.createElement('span');
      heart.className = 'heart ' + (i < lives ? 'heart-full' : 'heart-empty');
      heart.innerHTML = '&#9829;'; // Unicode for heart
      heartsContainer.appendChild(heart);
    }
  }

  // Render initial hearts
  renderHearts(initialLives);

  // Function to update timer
  // Function to update timer
function updateTimer() {
const now = new Date();
let timeLeft = restoreTime - now;

//console.log("Timer update invoked");
//console.log("Time left:", timeLeft);

if (timeLeft <= 0) {
  timeLeft = 0;

  // Emit live-restored event to the server
  console.log("Emitting live-restored event");
  socket.emit('live-restored', { userID });

  // Hide timer and stop the interval
  timerContainer.style.display = 'none';
  clearInterval(timerInterval);
  return;
}

const minutes = Math.floor(timeLeft / (1000 * 60));
const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

// Timer initialization logic
function timerlogic() {
if (initialLives < maxLives && restoreTime > new Date()) {
  console.log("Starting timer logic for restoring lives");
  timerContainer.style.display = 'block';

  // update the timer display
  updateTimer();

  // set up the interval for subsequent updates
  timerInterval = setInterval(updateTimer, 1000);
} else {
  console.log("Lives are full or no restore time. Hiding timer.");
  timerContainer.style.display = 'none';
}
} // Initialize the timer on page load
timerlogic()
  // Listen for "lives-decrease" event from the server
  socket.on('lives-decrease', (data) => {
    console.log("Received lives-decrease event:", data);
      console.log(Date.now())
    renderHearts(data.livesLeft); // Update hearts display
    console.log("Updated hearts based on lives:", data.livesLeft);
      if(data.livesLeft == 4){
          if (data.livesLeft < maxLives) {
          restoreTime.setTime(new Date(data.restoreTime).getTime()); // Update restore time
          console.log("New restore time:", restoreTime);
              initialLives = data.livesLeft
          timerContainer.style.display = 'block';
          //clearInterval(timerInterval); 
          timerlogic(); // Start the timer
        } else {
          console.log("Lives are full. Hiding timer.");
          timerContainer.style.display = 'none';
          clearInterval(timerInterval); // Stop the timer
        }
      }
    
  });
</script>

  